#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π –≤ –µ–¥–µ

–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –∏–∑:
1. –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –µ–¥—ã –∏—Å–ø–æ–ª—å–∑—É—è OpenAI Vision API
2. –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É—è OpenAI Text API

–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
- TELEGRAM_BOT_TOKEN: –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞
- OPENAI_API_KEY: –í–∞—à OpenAI API –∫–ª—é—á
"""

import os
import logging
import asyncio
from io import BytesIO
from typing import Optional
import hashlib

import telegram
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai
from PIL import Image
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
openai.api_key = os.getenv('OPENAI_API_KEY')
if not openai.api_key:
    raise ValueError("OPENAI_API_KEY environment variable is required")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –ò–ù–¢–ï–†–§–ï–ô–°–ê =====
# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –∏ –∫–Ω–æ–ø–∫–∏ –±–æ—Ç–∞

# –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∑–¥–µ—Å—å)
BUTTON_START = "üè† –°—Ç–∞—Ä—Ç"
BUTTON_ANALYZE_PHOTO = "üì∏ –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞"
BUTTON_SEARCH_CALORIES = "üîç –ü–æ–∏—Å–∫ –∫–∞–ª–æ—Ä–∏–π"
BUTTON_HELP = "‚ùì –ü–æ–º–æ—â—å"

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [BUTTON_ANALYZE_PHOTO, BUTTON_SEARCH_CALORIES],
        [BUTTON_HELP, BUTTON_START]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

class CalorieBot:
    def __init__(self):
        self.openai_client = openai.OpenAI(api_key=openai.api_key)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
üçé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π! üçé

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –≤ –µ–¥–µ:
üì∏ –§–æ—Ç–æ –µ–¥—ã - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
üìù –û–ø–∏—Å–∞–Ω–∏–µ - —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ —á—Ç–æ –≤—ã –µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2 —è–±–ª–æ–∫–∞ –∏ 200–≥ —Ä–∏—Å–∞")

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!
        """
        await update.message.reply_text(
            welcome_message, 
            reply_markup=get_main_keyboard()
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = """
‚ùì –ü–æ–º–æ—â—å - –ë–æ—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π

–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
üì∏ "–ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞" ‚Üí –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã
üîç "–ü–æ–∏—Å–∫ –∫–∞–ª–æ—Ä–∏–π" ‚Üí –æ–ø–∏—à–∏—Ç–µ –µ–¥—É —Ç–µ–∫—Å—Ç–æ–º

–ü—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π:
‚Ä¢ "2 —è–±–ª–æ–∫–∞"
‚Ä¢ "200–≥ –≤–∞—Ä–µ–Ω–æ–≥–æ —Ä–∏—Å–∞" 
‚Ä¢ "1 –∫—É—Å–æ–∫ –ø–∏—Ü—Ü—ã"
‚Ä¢ "2 —è–π—Ü–∞ –∏ —Ö–ª–µ–±"

üí° –ö–∞–ª–æ—Ä–∏–∏ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–∫ –æ—Ä–∏–µ–Ω—Ç–∏—Ä.
        """
        await update.message.reply_text(
            help_message,
            reply_markup=get_main_keyboard()
        )
    
    async def handle_button_press(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞
        if text == BUTTON_START:
            await self.start_command(update, context)
        elif text == BUTTON_ANALYZE_PHOTO:
            await self.handle_analyze_photo_button(update, context)
        elif text == BUTTON_SEARCH_CALORIES:
            await self.handle_search_calories_button(update, context)
        elif text == BUTTON_HELP:
            await self.help_command(update, context)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞, —Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã
            await self.handle_text(update, context)
    
    async def handle_analyze_photo_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞'"""
        message = """
üì∏ –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ–¥—ã, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é:
‚Ä¢ –ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ
‚Ä¢ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏  
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ! üì∑
        """
        await update.message.reply_text(message)
    
    async def handle_search_calories_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∏—Å–∫ –∫–∞–ª–æ—Ä–∏–π'"""
        message = """
üîç –ü–æ–∏—Å–∫ –∫–∞–ª–æ—Ä–∏–π

–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã –µ–ª–∏, –∏ —è –ø–æ–¥—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏.

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "2 —è–±–ª–æ–∫–∞"
‚Ä¢ "200–≥ –≤–∞—Ä–µ–Ω–æ–≥–æ —Ä–∏—Å–∞"
‚Ä¢ "1 –∫—É—Å–æ–∫ –ø–∏—Ü—Ü—ã"
‚Ä¢ "2 —è–π—Ü–∞ –∏ —Ö–ª–µ–±"

–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã –µ–ª–∏! ‚úçÔ∏è
        """
        await update.message.reply_text(message)
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é"""
        try:
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            processing_msg = await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Ñ–æ—Ç–æ...", reply_markup=get_main_keyboard())
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –≤ –Ω–∞–∏–ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
            photo = update.message.photo[-1]
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            file = await context.bot.get_file(photo.file_id)
            photo_bytes = await file.download_as_bytearray()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
            if len(photo_bytes) < 1000:
                await update.message.reply_text(
                    "‚ö†Ô∏è –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ.",
                    reply_markup=get_main_keyboard()
                )
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
            result = await self.analyze_food_photo_with_progress(photo_bytes, processing_msg)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await update.message.reply_text(result, reply_markup=get_main_keyboard())
            
        except Exception as e:
            logger.error(f"Error processing photo: {e}")
            await update.message.reply_text(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã.",
                reply_markup=get_main_keyboard()
            )
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        try:
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            processing_msg = await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã...", reply_markup=get_main_keyboard())
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            result = await self.analyze_food_text_with_progress(update.message.text, processing_msg)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await update.message.reply_text(result, reply_markup=get_main_keyboard())
            
        except Exception as e:
            logger.error(f"Error processing text: {e}")
            await update.message.reply_text(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –µ–¥—É –±–æ–ª–µ–µ —á–µ—Ç–∫–æ.",
                reply_markup=get_main_keyboard()
            )
    
    async def analyze_food_photo_with_progress(self, photo_bytes: bytes, processing_msg) -> str:
        """–ë—ã—Å—Ç—Ä—ã–π –∏ –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
            if len(photo_bytes) < 1000:
                return "‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ."
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ base64
            import base64
            from PIL import Image
            import io
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ JPEG
            try:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = Image.open(io.BytesIO(photo_bytes))
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if image.mode in ('RGBA', 'LA', 'P'):
                    image = image.convert('RGB')
                
                # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
                image.thumbnail((1024, 1024), Image.Resampling.LANCZOS)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JPEG
                img_buffer = io.BytesIO()
                image.save(img_buffer, format='JPEG', quality=85, optimize=True)
                img_buffer.seek(0)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                base64_image = base64.b64encode(img_buffer.getvalue()).decode('utf-8')
                
            except Exception as img_error:
                logger.error(f"Error processing image: {img_error}")
                # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–π—Ç—ã
                base64_image = base64.b64encode(photo_bytes).decode('utf-8')
            
            # –û–¥–∏–Ω –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
            result = await self._single_food_analysis(base64_image)
            
            return f"üì∏ {result}"
            
        except Exception as e:
            logger.error(f"Error in photo analysis: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

    
    
    
    
    async def _single_food_analysis(self, base64_image: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –µ–¥—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–ª–æ—Ä–∏–∏ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if len(base64_image) < 1000:
                return "‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
            if not self.openai_client.api_key:
                logger.error("OpenAI API key is not set")
                return "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            
            # –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å: –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–¥—É –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª–æ—Ä–∏–∏
            response = await asyncio.wait_for(
                asyncio.to_thread(
                    self.openai_client.chat.completions.create,
                    model="gpt-4o",
                    messages=[
                        {
                            "role": "user",
                            "content": [
                                {
                                    "type": "text",
                                    "text": "–ï—Å—Ç—å –ª–∏ –µ–¥–∞ –Ω–∞ —Ñ–æ—Ç–æ? –ï–¥–∞ –≤–∫–ª—é—á–∞–µ—Ç: –≥–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞, —Å—ã—Ä—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –æ—Ä–µ—Ö–∏, —Å–µ–º–µ—á–∫–∏, —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã, –∫—Ä—É–ø—ã, —Ñ—Ä—É–∫—Ç—ã, –æ–≤–æ—â–∏. –ï—Å–ª–∏ –µ—Å—Ç—å - –æ—Ü–µ–Ω–∏ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–π –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–π –ø–æ—Ä—Ü–∏–∏. –ù–ï –¥–∞–≤–∞–π –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100–≥. –í–ê–ñ–ù–û: 1 —Å–æ—Å–∏—Å–∫–∞ = ~150 –∫–∫–∞–ª, 2 —Å–æ—Å–∏—Å–∫–∏ = ~300 –∫–∫–∞–ª. –ï—Å–ª–∏ –Ω–µ—Ç –µ–¥—ã - –æ—Ç–≤–µ—Ç—å '–ù–ï–¢_–ï–î–´'. –§–æ—Ä–º–∞—Ç: '–ü—Ä–æ–¥—É–∫—Ç (~XX–≥) ‚Äî ~XXX –∫–∫–∞–ª'"
                                },
                                {
                                    "type": "image_url",
                                    "image_url": {
                                        "url": f"data:image/jpeg;base64,{base64_image}",
                                        "detail": "low"
                                    }
                                }
                            ]
                        }
                    ],
                    max_tokens=80,
                    temperature=0.1
                ),
                timeout=15.0
            )
            
            result = response.choices[0].message.content.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Ä–∞–∑—É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
            if not result or len(result) < 5:
                return "‚ùå –ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ–¥–∞ –Ω–∞ —Ñ–æ—Ç–æ
            if "–ù–ï–¢_–ï–î–´" in result.upper() or "–ù–ï–¢ –ï–î–´" in result.upper():
                return "‚ùå –ù–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –µ–¥—É."
            
            return result
            
        except asyncio.TimeoutError:
            return "‚è∞ –ê–Ω–∞–ª–∏–∑ –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ."
        except Exception as e:
            logger.error(f"Error in food analysis: {e}")
            logger.error(f"Error type: {type(e).__name__}")
            logger.error(f"Error details: {str(e)}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    
    
    async def _single_text_analysis(self, text: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –µ–¥—É, –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–ª–æ—Ä–∏–∏"""
        try:
            response = await asyncio.wait_for(
                asyncio.to_thread(
                    self.openai_client.chat.completions.create,
                    model="gpt-4o",
                    messages=[
                        {
                            "role": "user", 
                            "content": f"–≠—Ç–æ –µ–¥–∞: '{text}'? –ï–¥–∞ –≤–∫–ª—é—á–∞–µ—Ç: –≥–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞, —Å—ã—Ä—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –æ—Ä–µ—Ö–∏, —Å–µ–º–µ—á–∫–∏, —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã, –∫—Ä—É–ø—ã, —Ñ—Ä—É–∫—Ç—ã, –æ–≤–æ—â–∏. –ï—Å–ª–∏ –¥–∞ - –æ—Ü–µ–Ω–∏ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–π –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–π –ø–æ—Ä—Ü–∏–∏. –ù–ï –¥–∞–≤–∞–π –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100–≥. –í–ê–ñ–ù–û: 1 —Å–æ—Å–∏—Å–∫–∞ = ~150 –∫–∫–∞–ª, 2 —Å–æ—Å–∏—Å–∫–∏ = ~300 –∫–∫–∞–ª. –ï—Å–ª–∏ –Ω–µ—Ç –µ–¥—ã - –æ—Ç–≤–µ—Ç—å '–ù–ï–¢_–ï–î–´'. –§–æ—Ä–º–∞—Ç: '–ü—Ä–æ–¥—É–∫—Ç (~XX–≥) ‚Äî ~XXX –∫–∫–∞–ª'"
                        }
                    ],
                    max_tokens=60,
                    temperature=0.1
                ),
                timeout=6.0
            )
            
            result = response.choices[0].message.content.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –µ–¥—É
            if "–ù–ï–¢_–ï–î–´" in result.upper() or "–ù–ï–¢ –ï–î–´" in result.upper():
                return "‚ùå –í –æ–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –µ–¥—É."
            
            return result
            
        except asyncio.TimeoutError:
            return "‚è∞ –ê–Ω–∞–ª–∏–∑ –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ."
        except Exception as e:
            logger.error(f"Error in text analysis: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    async def analyze_food_text_with_progress(self, text: str, processing_msg) -> str:
        """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –û–¥–∏–Ω –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
            result = await self._single_text_analysis(text)
            
            return f"üìù {result}"
            
        except Exception as e:
            logger.error(f"Error in text analysis: {e}")
            return "‚ùå –ù–µ —Å–º–æ–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ - –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.error(f"Exception while handling an update: {context.error}")
        
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = CalorieBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("help", bot.help_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_button_press))
    application.add_handler(MessageHandler(filters.PHOTO, bot.handle_photo))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(bot.error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Starting Calorie Estimation Bot...")
    print("ü§ñ –ë–æ—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –∑–∞–ø—É—â–µ–Ω!")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == '__main__':
    main()
